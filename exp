P5 Aim: Write an assembly language program for 16 bit addition.

.MODEL SMALL
.STACK 100H
.DATA
N1 DW 6587H
N2 DW 1111H
SUM DW 2 DUP(0)
.CODE
START:
MOV AX,@DATA
MOV DS,AX
MOV AX,N1
MOV BX,N2
MOV BX,0000H
ADD AX,BX
MOV SUM,AX
JNC EXIT
INC DX
MOV SUM+1,DX
EXIT:MOV AH,4CH
INT 21H
END START



P6:Aim: Write an assembly language program to convert Packed BCD to Unpacked BCD and also convert it into its ASCII value.

.MODEL SMALL
.STACK 100H
.DATA
N1 DB 25H
DI1 DB ?
DI2 DB ?
A1 DB ?
A2 DB ?
.CODE
START:
MOV AX,@DATA
MOV DS,AX
MOV AL,N1
AND AL,0FH
MOV DI1,AL
ADD AL,30H
MOV A1,AL
MOV BL,N1
AND BL,0F0H
MOV CL,04H
ROL BL,CL
MOV DI2,BL
ADD BL,30H
MOV A2,BL
EXIT:
MOV AH,4CH
INT 21H
END START

P7 Aim :  Write an assembly language program for Program to move set of numbers from one memory block to another.


c1-

.MODEL SMALL
.STACK 100H
.DATA
SOU DB 24H,12H,34H,81H,59H
DSE DB 5 DUP(0)
.CODE
START:
MOV AX,@DATA
MOV DS,AX
LEA SI,SOU
LEA DI,DSE
MOV CX,5
BACK:
MOV AL,[SI]
MOV [DI],AL
INC SI
INC DI
LOOP BACK
EXIT:
MOV AH,4CH
INT 21H
END START


c2-

.MODEL SMALL
.STACK 100H
.DATA
SOU DB 24H,12H,34H,81H,59H
DSE DB 5 DUP(0)
.CODE
START:
MOV AX,@DATA
MOV DS,AX
LEA SI,SOU
LEA DI,DSE
MOV CX,5
BACK:
MOV AL,[SI]
MOV [DI],AL
INC SI
INC DI
LOOP BACK
EXIT:
MOV AH,4CH
INT 21H
END START





P8 Aim: Write an assembly language program to count number of 1’sand 0’s in a
given 8-bit number

.MODEL SMALL
.STACK 100H
.DATA
NUMBER DW 5648H
ZERO DW 01 DUP(?)
ONES DW 01 DUP(?)
.CODE
START:
MOV AX,@DATA
MOV DS,AX
MOV AX,NUMBER
MOV BX,00H
MOV DX,00H
MOV CX,10H
LABEL1:
 ROL AX,1
 JC ONE
 INC BX
 JMP NEXT
ONE:
 INC DX
NEXT:
 DEC CX
 JNZ LABEL1

MOV ZERO,BX
MOV ONES,DX
MOV AH,4CH
INT 21H
END START



Exp9: Write an assembly language program to find even and odd numbers from a given list.
DATA SEGMENT
 X1 DB 10D, 'ENTER THE NUMBER : $'
 X2 DB 10D, 'THE GIVEN NUMBER IS AN EVEN NUMBER$'
 X3 DB 10D, 'THE GIVEN NUMBER IS AN ODD NUMBER$'
DATA ENDS

CODE SEGMENT
 ASSUME CS: CODE, DS: DATA
START:
 MOV AX, DATA
 MOV DS, AX  

 LEA DX, X1
 MOV AH, 09h
 INT 21h

 MOV AH, 01h
 INT 21h

 SUB AL, 30h   ; Convert ASCII to numeric value
 MOV BL, 2
 DIV BL
 CMP AH, 0 ; CHECK IF REMAINDER IS ZERO
 JE EVEN_NUM ; If AH is zero, it's an even number
 JMP ODD_NUM

EVEN_NUM:
 LEA DX, X2
 MOV AH, 09h
 INT 21h
 JMP LAST

ODD_NUM:
 LEA DX, X3
 MOV AH, 09h
 INT 21h

LAST:
 MOV AH, 4Ch
 INT 21h
CODE ENDS

END START


Exp10a: Write an ALP to find whether a string is palindrome or not.
DATA SEGMENT
    MSG1 DB 10,13,'ENTER ANY STRING :- $'
    MSG2 DB 10,13,'ENTERED STRING IS :- $'
    MSG3 DB 10,13,'LENGTH OF STRING IS :- $'
    MSG4 DB 10,13,'NO, GIVEN STRING IS NOT A PALINDROME $' 
    MSG5 DB 10,13,'THE GIVEN STRING IS A PALINDROME $'
    MSG6 DB 10,13,'REVERSE OF ENTERED STRING IS :- $' 
    P1 LABEL BYTE
    M1 DB 0FFH
    L1 DB ?
    P11 DB 0FFH DUP ('$')
    P22 DB 0FFH DUP ('$')
DATA ENDS 
DISPLAY MACRO MSG
    MOV AH,9H
    LEA DX,MSG
    INT 21H
 ENDM   
CODE SEGMENT
    ASSUME CS:CODE,DS:DATA
 START:
        MOV AX,DATA
        MOV DS,AX                
        DISPLAY MSG1
        LEA DX,P1
        MOV AH,0AH    
        INT 21H
        DISPLAY MSG2
        DISPLAY P11
       
        DISPLAY MSG3
       
        MOV DL,L1
        ADD DL,30H
        MOV AH,2
        INT 21H
       
        DISPLAY MSG6
               
        LEA SI,P11
        LEA DI,P22
       
        MOV DL,L1
        DEC DL
        MOV DH,0
        ADD SI,DX
        MOV CL,L1
        MOV CH,0
       
REVERSE:
        MOV AL,[SI]
        MOV [DI],AL
        INC DI
        DEC SI
        LOOP REVERSE
       
        DISPLAY P22
                      
        LEA SI,P11
        LEA DI,P22   
       
        MOV CL,L1
        MOV CH,0
       
CHECK:
        MOV AL,[SI]
        CMP [DI],AL
        JNE NOTPALIN
        INC DI
        INC SI
        LOOP CHECK
        DISPLAY MSG5
        JMP EXIT
 NOTPALIN:
        DISPLAY MSG4
 EXIT:   MOV AH,4CH
        INT 21H
 CODE ENDS
 END START


Exp10b: Write an ALP to find whether a string is palindrome or not : Reverse String
.MODEL SMALL
.STACK 100H
.data
m1 DB 'Enter String : $'
m2 DB 'Reverse String : $'
str1 DB 15 DUP('$')
str2 DB 15 DUP('$')
len DW 0 ; Length of the string as word
.code
start:
    mov ax, @data
    mov ds, ax

    ; Print "Enter String :"
    mov ah, 09h
    lea dx, m1
    int 21h

    ; Input string
    lea si, str1
input_loop:
    mov ah, 01h     
    int 21h
    cmp al, 0Dh     
    je reverse      
    mov [si], al    
    inc si
    inc len
    jmp input_loop

reverse:
    mov cx, len     
    lea si, str1    
    lea di, str2    
    add si, cx      
    dec si          
reverse_loop:
    mov al, [si]    
    mov [di], al    
    inc di          
    dec si          
    loop reverse_loop

    mov byte ptr [di], '$'

    mov ah, 09h
    lea dx, m2
    int 21h

    mov ah, 09h
    lea dx, str2
    int 21h

    mov ah, 4Ch
    int 21h

end start


Exp11: Write an assembly language program to find factorial of a numbers.
.MODEL SMALL
.STACK 100H
.DATA
N DB 4H
.CODE
START:
MOV AX,@DATA
MOV DS,AX
MOV CL,N
LOOP1:
MUL CL
DEC CL
JNZ LOOP1
MOV AH,4CH
INT 21H
END START




1] AND GATE
  -connect the battery first
  - Then on switch 1
  - After that on both switch 2(A) and switch 3(B)
  - light is on now

2] OR GATE
   -connect the battery first
   - on any one of the switch or both switch
   - light is on now

3] NOT GATE
   -connect the battery first
   -Then on switch 1
   - do not on switch 2 because it is a not gate
   - light is on now

4] NAND GATE
   -connect the battery first
   -Then on switch 1
   - Then on switch 2
   - light is on now
    NOTE: you can on only one of the switch from switch 1 and 2
 
5] NOR GATE
   -connect the battery first
   -Then on switch 1
   - light is on now

6] XOR GATE
   - On  the power button
   - then click on switch 1(A)/Switch 2(B)
   -light is on now

7] XNOR GATE
   - On  the power button
   - then click on switch 1(A) and Switch 2(B)
   -light is on now

1]Half adder
  -00 input then sum =0 , carry =1
  -01 input then sum =1 , carry= 0
  -10 input then sum = 1 , carry =0
  -11 input then sum =0 , carry =1

2] full adder
    -000 input then carry =0  , sum =0
    -001 input then carry = 0 , sum =1
    -011 input then carry = 1 , sum =0
    -100 input then carry = 1 , sum =1
    -110 input then carry = 1 , sum =0
    -111 input then carry = 1 , sum =1
    -010 input then carry = 0 , sum =1
    -101 inpu  then carry = 1 , sum =0

3] Half subtractor
  -00 input then difference = 0 , sum =0
  -01 input then difference = 1 , sum =1
  -10 input then difference = 1 , sum =0
  -11 input then difference = 0 , sum =0

4] Full subtractor
    -000 input then  difference = 0 , bout=0
    -001 input then difference = 1 , bout=1
    -011 input then difference = 0 , bout=1
    -100 input then difference = 1 , bout=0
    -110 input then difference = 0 , bout=0
    -111 input then difference = 1, bout=1
    -010 input then  difference = 1, bout=1 
    -101 input then  difference = 0, bout=0 


1]Multiplexer
  - switch on power supply
  - Then switch on data
  - 00 input and on D0 then output = 1
  - 01 input and on D1 then output = 1 
  - 10 input and on D2 then output = 1
  - 11 input and on D3 then output = 1
  

2]DeMultiplexer
  - switch on power supply
  - Then switch on data
  - 00 input then y0 = [D=1] 
  - 01 input then y1 = [D=1]
  - 10 input then y2 = [D=1]
  - 11 input then y3 = [D=1]


link - https://dec-iitkgp.vlabs.ac.in/exp/7-segment-led-display/
Note: use this link for experiment

- on B
- on LT
- on BL/RBO
- on RBI
- light will glow as 2
